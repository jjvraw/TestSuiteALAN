abba function abba () 
begin
    integer abba , abba , abba     boolean abba ;     if true rem false then
    if true * abba [-not false + false / not not not true + not not false * not abba () ] or false * abba - not not true * 100/ not abba then
    if -not abba abba = not not 100/ abba () + false - abba and true then
    abba := array 100+ 100
; get abba [false ] 
; if -and not 100then
    relax 
end


end

; while -true * 100>= -true + abba [-not false rem abba rem false + not not true or abba / not 100and true ] / 100or true and not false and false do     leave 
; put "hello" ."hello" ."hello" 

end

; get abba 

end


end


end
function abba (integer array abba , integer array abba ) 
begin
    boolean abba , abba ;     if 100and false rem not not abba - abba [-false and not abba () * abba () - abba [true - true - true rem 100] 100and 100] * 100- false / 100* false >= abba + false / not abba then
    if abba or true * false - not true then
    leave 
; call abba () 
; abba [abba () rem 100* not not not not not not false ] := array -not 100and true + not false rem false rem not not abba () - not true * abba rem false 
else     relax 
end

else     relax 
end

; leave 
put "hello" ."hello" 

end

begin
    boolean abba , abba ;     integer array abba , abba ;     relax 
end
