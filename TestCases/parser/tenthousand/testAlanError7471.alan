source abba function abba (boolean array abba , integer abba , boolean abba ) to boolean 
begin
    while -100* false - false rem true + 100and do     relax 
end

; abba [-not not not false / not not 100] := array 100and true * true - not abba / false / abba [abba [-abba * false * abba ] or not not not not false rem false or false and not true ] 
; abba [true and abba rem false - true rem 100+ true / false ] := array -true / true * 100+ not 100rem true * not true or true 

end
function abba (integer abba , boolean abba , integer array abba ) to integer array 
begin
    while -not abba * abba [true rem abba () and not not not 100+ false or abba not 100] rem true do     relax 
end

; call abba () 
; call abba () 

end

begin
    boolean array abba ;     call abba (
; if abba () and abba () - abba [-false and not not 100not true rem not not not true / not not abba () not abba ] * true * false + not false / false <= 100rem 100then
    relax else     if not abba [100or false * 100rem false ] / not <> not not true     get abba 
else relax 
end

; if -false and true rem true < abba rem not not not true - not true and false and true or true rem not not not abba abba then
    relax 
end

; if abba [100- not not 100rem false and 100] then
    relax else     relax 
end


end


end
