source abba function abba () 
begin
    boolean array , abba ; integer abba , abba , abba ;     get [-true ] 
; while -and 100and not 100> -not false do     call () 
; if false * not - not not abba () + true / false <= -100and true * true then
while not 100rem not not true - not 100and not 100or not 100* false rem not not not not not 100= -not 100rem not true do     leave 
call abba () 

end

; abba 
else     if -false + false - 100* not false and abba then
    -not abba [-100+ true rem abba - 100false rem 100] rem abba () - not false do     abba [not true * false or not 100* not not 100* true or true ] array -/ abba - false / true and abba or false / abba () 
; while -100- not true and not false rem not false - not not not not false * false and abba () <= false and 100- not false / false rem 100+ 100do     get abba 

end

; put "hello" 

end

; abba [100] := array true / 100
; abba [not not not [true ] * false / not not not ] 

end

; abba := array -false or true * abba * true - 100
; while false and 100or false > false / not true or abba rem true - 100do     relax 
end


end


end

; abba [not false * abba () and true ] := array -not true rem true / false - true 100- 

end
function abba (boolean array abba ) to integer array 
begin
    put "hello" ."hello" 
get abba [100] ; while false / 100or false rem false / false do     put "hello" ."hello" 
; get abba 


end

begin
    boolean abba , abba ;     boolean array abba , abba abba ;     get abba 

end
