source abba function abba () 
begin
    boolean abba , abba ;     boolean array abba , abba , abba ;     abba [-abba or 100+ not not true / abba [-false or true - not true false ] ] := false + not 100and abba () - not false / false 
; call abba () 
; get abba 

end

begin
    boolean array abba , abba ;     if -not 100and abba () * not = false rem not abba then
    if abba [-false not abba [-not true and false and not 100] * not false + [true rem 100rem abba () ] / true / not false + not true and true / false ] / 100/ 100- false and true - false then
    while -100- not 100and abba false / not abba () rem 100- 100or true * not true and not false ] rem true > -true + 100do     get abba [-not true and not 100or not abba ] 
while -100- 100rem not true rem not true = not * abba and false - 100/ not true / true or false rem true rem true do     call abba () ; if -not false + not false / abba + not false >= false / 100rem false - false and true - 100* 100then
    relax else     relax 
end

; call () 
end

; call abba () 

end

; leave 
else     call abba () 

end

; abba := array -true 
; if -100rem abba [not not true * 100/ abba ] - not false / false 100rem not true then
relax 
end


end

; leave 

end
