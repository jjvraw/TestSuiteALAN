source abba function abba (integer abba , boolean array abba ) 
begin
    boolean abba , abba , abba ;     integer array abba abba ;     if abba rem false false / 100rem abba [-not true / abba - false ] then
    relax 
end

; call (
; while -abba [true - 100/ not not abba () / - not not not not not not not not abba [abba () - and 100] / not false ] * abba () rem not not false + 100- not abba and true rem not true <= -and 100do     abba [abba * 100not not 100] := -true * false * abba - not true rem abba [-false * not not true + not false or not not true and not not not not 100/ not true ] rem true or false 
; if false / abba [-not not not abba / not abba + abba ) - 100/ 100] then
    relax else     call abba () ; call abba () 

end

; call abba () 

end


end
function abba (boolean array abba , integer array abba , integer array abba ) to integer array 
begin
    boolean abba ;     boolean array abba , abba , abba     if true then
    relax else     relax 
end

; call abba () 

end

begin
    boolean abba abba , abba ;     boolean abba , abba , abba ;     get abba 

end
