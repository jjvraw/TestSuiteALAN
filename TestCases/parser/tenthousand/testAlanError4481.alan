source abba function abba () to boolean array 
begin
    integer abba , abba ;     call () 
; -abba * abba ) or not not not 100/ 100do     if abba -abba and abba ] or false * 100rem not [-abba () rem not 100] = not true rem abba * abba [-not 100* not not not abba [-false and false rem true ] and not true - abba * true - not 100true / false - false * false then
    relax else     relax 
end


end

while not not 100and abba [not not not abba and true + true * false - false ] > -abba / false rem true or abba )     abba [not 100or 100rem not false ] := array abba [-not true * true rem or true * 100or true ] or false / true rem false + 100
; get abba 

end


end
function abba (integer abba , integer abba ) to boolean 
begin
    integer array abba , abba ;     integer array abba , abba ;     if -not not not false - false rem 100- 100* not 100/ 100>= -false rem not not false and false or true - not false / not abba () rem abba () then
    call abba (
; abba := array -false or abba or 100rem not not not true * false 
; if true * false then
    while true / true * abba () - rem false - 100do     put "hello" ."hello" ."hello" 
; abba array -not not false 

end

put "hello" 
else     relax 
end


end

; call abba () ; call abba () 

end

begin
    boolean abba ;     integer abba , abba ;     get abba 
; get abba [abba () * 100+ false rem false and not 100] 

end
