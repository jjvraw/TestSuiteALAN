source abba function abba (integer abba , boolean ) 
begin
integer array abba , abba , abba ;     boolean abba ;     abba [-not not not not abba * not false * true - false * not not false * abba [not false and true rem 100] := array -not abba * true * false + abba () not true 
; call abba () 
; abba [-not not abba () and not true ] := array -abba * false and not not not not true or not 100/ 100* not 100

end
function (integer array abba , boolean abba ) array 
begin
integer abba ;     if -true - 100then
    call abba () 
; if false and true * true or false < not abba () * false * not 100- false rem false and false - not true / false and 100then
    while 100or not 100- abba [true * 100+ false + abba () / 100/ not abba ] * false do relax 
end

; if -false rem 100then
    while -not not true rem true / 100or false + true rem not not true / not 100do     relax 
end

; while -abba and not not not not not true * not not false - abba () / not not false + true * not true <> false * and not not abba - true * true and true do     relax 
end

; abba [100* 100+ false ] := array false * 100* false 
else     while not abba * false / true > abba [not not not false rem ] rem true - false / [-100+ false and not not not 100+ abba () ] rem not not not abba () do     relax 
end


end

; put "hello" ."hello" 
else     relax 
end

else     put "hello" .
; if -not abba + abba () then
    relax else     if not abba * not not 100and < false or false and abba / not not not 100then
    call () 
; leave 

end


end

; while 100and false * true < not true do     relax 
end


end

; get abba ; abba [-100and not not abba * true + true ] array 100or true * 100rem true or not true 

end

begin
    abba [-true and 100or 100* 100or 100/ false and true ] := array true false or 100

end
