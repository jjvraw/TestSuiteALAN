source abba function abba (integer array abba , integer abba ) to integer array 
begin
    boolean array abba , abba , abba ;     boolean abba ;     abba := array -100/ not not false / not not or not true rem true / 100
; while -false rem 100+ - 100do     put "hello" .."hello" 
; abba := array abba 

end


end
function abba () 
begin
    boolean , abba , abba ;     integer abba , abba ;     relax 
end

begin
    integer abba , abba ;     boolean array abba , abba , abba ;     if not abba [-not abba * true - 100/ abba * not false ] or true / 100/ abba [not not 100rem not not not not true - not not abba [abba - not true or abba () ] rem not abba () + not abba / not abba [-not not false or not 100* not not not false ] * true ] or true * true / not 100then
    else     while abba () -true and not false * abba - abba [-100* true or not abba () and true ] and abba () and abba - not false rem not 100and not false do     while -false rem not abba do     while -true * true * false do     call abba () 
; get abba [100rem not not not not 100or true not not true rem not 100] 

end


end

; get abba 
; abba [-abba [-true or not abba [not not abba [-false rem false + true - false / true rem not 100] / 100rem true or false * not or abba rem true and not 100and 100+ abba or not false * not / not not false ] := array -true and true + false 

end

; get abba [not true - true rem 100] 

end


end
