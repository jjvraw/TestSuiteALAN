source abba function abba (boolean abba , boolean array abba , integer abba ) 
begin
    boolean abba ;     integer array abba , abba ;     get abba 
; if -true / not not abba () or abba rem not not not not false / then
    call abba () 
; while -not not abba () - 100* true - abba * false / 100<> not false and abba () - 100/ not abba [false rem true - false or not true and not 100] - true and not not 100/ 100do     relax 
end

; := array -not true + abba () 

end

; get abba 

end
function abba (boolean abba , array abba , boolean array abba ) to boolean 
begin
    if -true * 100* abba + not false rem not 100* not false = -true * not false then
    relax else     put "hello" ."hello" ."hello" 
; if not = -false / abba [false and 100- true ] or true then
    if -not not 100rem true / = -true rem false / abba - true / abba then
    while -* false < -abba () / abba / false do     relax 
end

; while true and not 100* not not false - false rem not not 100do     relax 
end


end


end


end


end

begin
    boolean abba ;     integer array abba , abba , abba ;     call abba () 
; abba [abba or true rem false / not not not not false ] := array false * not not abba * not 100- not false / true * not abba [-not abba rem 100* abba - not not false or true ] - abba () 

end
