source abba function abba () 
begin
    relax 
end
function abba (integer array abba , integer array abba ) to integer array 
begin
    boolean abba , abba ;     boolean array abba , abba , abba     abba [abba () / not 100or not true * not false * not not false ] := array -not not * not 100or false rem 100
; get abba [-true not not abba or false / not 100and abba [-not not not abba ] ] 

end

begin
    while -false and 100* not not not 100- 100< false rem abba () rem true do     while 100- false * not not 100or false 100+ true rem not false or true do     if -not false rem abba () + abba [100and not not false rem not false ] - * not false > not not 100+ abba / 100or true then
    relax else     while false and not true + / false - not abba / false / not true do     call abba () 
; -100rem 100+ not abba [false + abba () rem 100] * true - not true false / true <> true * true * not not false then
    leave 
; while not not abba [-abba () + not false and not true ] or not 100* false + 100> false / not not false * false + abba do     relax 
else     relax 
end

; while -false + 100rem abba (+ true rem not 100<= 100and 100+ not false and not false * false or abba and false     relax 
end


end

; get abba [100] 
; while -not 100rem false do     leave 
; if -false - not 100rem false + 100* abba <= true and false rem not not false or not false + not not 100/ not false then
    relax else     relax 
end

end


end
; put 
; if -100* () or abba [-not false rem false rem 100- not 100rem false ] * not false then
    abba [not false rem not abba [-false * false rem abba [-true rem false and 100] ] + abba ] := array abba / 100rem true 

end


end

; abba := array -not not 100

end

; while abba and 100* true - not not false rem 100do     relax 
end

; if -not not not true / not abba () * false then
    leave 
; call abba () 
else     relax 
end


end
