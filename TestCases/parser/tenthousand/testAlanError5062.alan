source abba function abba (boolean array abba , integer array abba ) to boolean array 
begin
    integer abba , abba , abba ;     boolean array abba ;     abba [true rem true - not not abba [-true rem false rem abba () or not abba ] or false rem true ] := array -false / abba [-not false / abba / false / not not abba - not true rem not not abba () * not not false 

end
function abba () to integer 
begin
    integer array abba , abba abba ;     get abba [-abba ] 
; while -true / false * not not false - not true * abba or 100-not abba [true or not abba and not 100/ false - abba ] + false * false / not false do     call abba () 
; put "hello" ."hello" ."hello" 

end

; put "hello" ."hello" 

end

begin
    integer abba abba ;     call abba () 
; get abba [-not not not not 100* 100* true or not 100] ; while true / not true and not true + rem true and not not not false + not abba [abba [-not 100rem 100* 100] or not not not false rem abba / not abba + abba [100] * not true ] < -not true - not not true true do     while -not 100* not not not true / 100or false rem true do     put "hello" 

end


end


end
