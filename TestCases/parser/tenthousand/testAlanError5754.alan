source abba function abba (boolean array abba , integer abba ) to boolean 
begin
    integer abba , abba ;     integer abba , abba ;     if not abba [-abba and true / not false ] rem false rem not true or false * not not not true / 100< -abba [not not true / false - true * not 100and true - abba [-false rem not true / true ] * not abba false + 100and not abba [-100] or true then
    abba := -false / abba [true + false or not abba ] 
; while -not not abba rem 100+ false do     relax 
end


end

; if abba [-false or rem abba [-true / true rem not not abba not true * 100] and abba () ] 100or true rem not not true + false <> abba and 100* not not true then
    relax else     relax 
end

; while -abba [not not abba rem not false rem not abba () ] * abba [-100] and abba + not false do     call abba () 

end


end
function abba () 
begin
    boolean abba , abba , abba ;     integer abba , abba , abba ;     relax 
end

begin
    integer array abba ;     boolean abba , abba , abba ;     get abba [-true + false and true * abba + not not not true * not not false * abba ] 
; if 100rem false rem not abba or 100rem not false rem true <> -true / abba * true or not true - not 100* abba * abba () then
    while not 100> 100+ false rem false - 100and 100do     put "hello" 

end

; if then
    leave 
; put "hello" ."hello" ."hello" 

end

; call abba () 
else     relax 
end

; put "hello" 

end
