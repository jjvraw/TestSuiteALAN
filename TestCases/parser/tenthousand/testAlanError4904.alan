source abba function abba () 
begin
    boolean abba ;     integer array abba , abba , abba ;     relax 
end
function abba (integer array abba , boolean array abba ) to boolean 
begin
    boolean array abba , abba ;     integer abba , abba , abba ;     relax 
end

begin
    integer abba , abba ;     while -false and not not true - 100+ not true * abba do     relax 
end

; if true + not not false then
    if true rem true and true or not false / 100+ rem true then
    abba [-not 100and false or false / not false array abba () ; while -not abba () rem not abba rem abba + abba [-100/ abba do     call abba (
; get abba 
; while false rem abba * 100+ not not true rem false + true do     while false false / false + not not true and not not abba () rem 100do     get abba 
; while -100and abba () rem not true - abba and true do     get abba [-not true * abba / true ] 

end


end

; put "hello" "hello" ."hello" 
; get abba [false / abba and 100- / not 100] 

end


end

; leave else     put "hello" ."hello" 
; call abba () 
; if false / false rem 100- 100/ 100then
    while -true not not false * true - not abba [-abba [-100rem false - 100+ abba / 100] * not false + not abba rem true / not abba ] do     abba [100- abba true * not abba / true or abba [not false - not true / not abba and true ] and 100- true / false and true ] and true * not true ] := array not false and false + true or true * not abba [-not 100] * not not false 
; if -not true and not true > -false then
    if not abba rem abba () * true or false and abba - 100/ not 100then
    relax else     if false - not 100rem abba rem abba [-abba + false * false ] >= -abba () then
    get abba 
; get abba [100- true ] 

end

; call abba (
; leave 

end

; call abba () 
else     relax 
end

100then
    get abba [false rem 100* abba + 100and true - not true * 100] 

end


end


end


end

while -false - abba + false do     leave 
; abba := array -not not abba () * true / not true 

end

else     get abba [not 100or not true * not not not 100or false * true rem not abba () ] 

end


end
